suite: Test Secrets
templates:
  - secrets.yaml

# Common documentSelector patterns using YAML anchors
_selectors:
  app-secrets: &app-secrets-selector
    path: metadata.name
    value: RELEASE-NAME-hdx-oss-v2-app-secrets
  clickhouse-secrets: &clickhouse-secrets-selector
    path: metadata.name
    value: RELEASE-NAME-hdx-oss-v2-clickhouse-secrets
tests:
  - it: should always render app secrets
    set:
      clickhouse:
        enabled: false
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Secret
      - equal:
          path: metadata.name
          value: RELEASE-NAME-hdx-oss-v2-app-secrets
      - equal:
          path: type
          value: Opaque
      - isNotEmpty:
          path: data.api-key
          
  - it: should render clickhouse secrets when clickhouse is enabled
    set:
      clickhouse:
        enabled: true
        config:
          users:
            appUserPassword: "test-password"
            otelUserPassword: "test-otel-password"
    asserts:
      - hasDocuments:
          count: 2
      # App secrets validation
      - documentSelector: *app-secrets-selector
        isKind:
          of: Secret
      - documentSelector: *app-secrets-selector
        equal:
          path: metadata.name
          value: RELEASE-NAME-hdx-oss-v2-app-secrets
      - documentSelector: *app-secrets-selector
        equal:
          path: type
          value: Opaque
      - documentSelector: *app-secrets-selector
        isNotEmpty:
          path: data.api-key
      # ClickHouse secrets validation  
      - documentSelector: *clickhouse-secrets-selector
        isKind:
          of: Secret
      - documentSelector: *clickhouse-secrets-selector
        equal:
          path: metadata.name
          value: RELEASE-NAME-hdx-oss-v2-clickhouse-secrets
      - documentSelector: *clickhouse-secrets-selector
        equal:
          path: type
          value: Opaque
      - documentSelector: *clickhouse-secrets-selector
        equal:
          path: data.appUserPassword
          value: dGVzdC1wYXNzd29yZA==
      - documentSelector: *clickhouse-secrets-selector
        equal:
          path: data.otelUserPassword
          value: dGVzdC1vdGVsLXBhc3N3b3Jk
      # Validate standard labels exist (without checking helm.sh/chart)
      - isSubset:
          path: metadata.labels
          content:
            app.kubernetes.io/instance: RELEASE-NAME
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: hdx-oss-v2
        documentSelector: *app-secrets-selector
      - matchRegex:
          path: metadata.labels["app.kubernetes.io/version"]
          pattern: ^\d+\.\d+\.\d+$
        documentSelector: *app-secrets-selector
      - isSubset:
          path: metadata.labels
          content:
            app.kubernetes.io/instance: RELEASE-NAME
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: hdx-oss-v2
        documentSelector: *clickhouse-secrets-selector
      - matchRegex:
          path: metadata.labels["app.kubernetes.io/version"]
          pattern: ^\d+\.\d+\.\d+$
        documentSelector: *clickhouse-secrets-selector
      # Validate chart version format without exact match
      - matchRegex:
          path: metadata.labels["helm.sh/chart"]
          pattern: ^hdx-oss-v2-\d+\.\d+\.\d+$
        documentSelector: *app-secrets-selector
      - matchRegex:
          path: metadata.labels["helm.sh/chart"]
          pattern: ^hdx-oss-v2-\d+\.\d+\.\d+$
        documentSelector: *clickhouse-secrets-selector
          
  - it: should not render clickhouse secrets when clickhouse is disabled
    set:
      clickhouse:
        enabled: false
    asserts:
      - hasDocuments:
          count: 1
